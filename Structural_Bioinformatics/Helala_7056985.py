# -*- coding: utf-8 -*-
"""Copy of Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mdpmBC8Mp9B7-KBa6-3lNr7c6ERFpOJp
"""

import sys
import math

Kyte_Doolittle_scale = { 'ALA': 1.8,'ARG':-4.5,'ASN':-3.5,'ASP':-3.5,'CYS': 2.5,
       'GLN':-3.5,'GLU':-3.5,'GLY':-0.4,'HIS':-3.2,'ILE': 4.5,
       'LEU': 3.8,'LYS':-3.9,'MET': 1.9,'PHE': 2.8,'PRO':-1.6,
       'SER':-0.8,'THR':-0.7,'TRP':-0.9,'TYR':-1.3,'VAL': 4.2 }

atom_lines = []
def pdb_file_reader(pdb_file):

      with open(pdb_file, 'r') as file:
        for line in file:
            if line.startswith('ATOM') :
                atom_lines.append(line.strip())
      return atom_lines

def amino_acid_composition_calculator(atom_lines):
    amino_acid_composition = {}
    for line in atom_lines:
            if "CA" in line:
              amino_acid = line[17:20]
              amino_acid_composition[amino_acid] = amino_acid_composition.get(amino_acid, 0) + 1
    return amino_acid_composition

amino_acid_composition = {}

def amino_acid_composition_percentage_calculator(atom_lines):

    total_count = 0
    for line in atom_lines:
            amino_acid = line[17:20]
            amino_acid_composition[amino_acid] = amino_acid_composition.get(amino_acid, 0) + 1

            total_count += 1

    amino_acid_composition_percentage = {k: (v / total_count) * 100 for k, v in amino_acid_composition.items()}
    return amino_acid_composition_percentage

atomic_composition = {}

def atomic_composition_calculator(atom_lines):

    for line in atom_lines:
      atom = line[13:15]
      atomic_composition[atom] = atomic_composition.get(atom, 0) + 1
    return atomic_composition

atomic_composition = {}

def atomic_composition_percentage_calculator(atom_lines):
    total_count = len(atom_lines)

    for line in atom_lines:
          atom = line[13:15]
          atomic_composition[atom] = atomic_composition.get(atom , 0) + 1
    atomic_composition_percentage = {k: (v / total_count) * 100 for k, v in atomic_composition.items()}
    return atomic_composition_percentage

amino_acid_hydrophobicity_composition = {'Hydrophobic': 0, 'Hydrophilic': 0}

def amino_acid_hydrophobicity_composition_calculator(amino_acid_composition, Kyte_Doolittle_scale):

    for amino_acid, count in amino_acid_composition.items():
        if Kyte_Doolittle_scale[amino_acid] > 0:
            amino_acid_hydrophobicity_composition['Hydrophobic'] += count
        else:
            amino_acid_hydrophobicity_composition['Hydrophilic'] += count
    return amino_acid_hydrophobicity_composition

def amino_acid_hydrophobicity_composition_percentage_calculator(amino_acid_composition, Kyte_Doolittle_scale):
    total_count = 0
    for amino_acid, count in amino_acid_composition.items():
        if Kyte_Doolittle_scale[amino_acid] > 0:
            amino_acid_hydrophobicity_composition['Hydrophobic'] += count
        else:
            amino_acid_hydrophobicity_composition['Hydrophilic'] += count
        total_count += count

    amino_acid_hydrophobicity_composition_percentage = {k: (v / total_count) * 100 for k, v in amino_acid_hydrophobicity_composition.items()}
    return amino_acid_hydrophobicity_composition_percentage

amino_acid_charge = {
        'ARG': 'Positive', 'HIS': 'Positive', 'LYS': 'Positive',
        'ASP': 'Negative', 'GLU': 'Negative',
        'ALA': 'Neutral', 'CYS': 'Neutral', 'PHE': 'Neutral', 'GLY': 'Neutral', 'ILE': 'Neutral',
        'LEU': 'Neutral', 'MET': 'Neutral', 'ASN': 'Neutral', 'PRO': 'Neutral', 'GLN': 'Neutral',
        'SER': 'Neutral', 'THR': 'Neutral', 'VAL': 'Neutral', 'TRP': 'Neutral', 'TYR': 'Neutral'
    }
amino_acid_charge_composition = {'Positive': 0, 'Negative': 0, 'Neutral': 0}
def amino_acid_charge_composition_calculator(amino_acid_composition):

    for amino_acid, count in amino_acid_composition.items():
        charge = amino_acid_charge.get(amino_acid, 'Neutral')
        amino_acid_charge_composition[charge] += count
    return amino_acid_charge_composition

heteroatom_lines = []
def hetero_atom_pdb_reader(pdb_file):

    with open(pdb_file, 'r') as file:
        for line in file:
            if line.startswith('HETATM'):
                heteroatom_lines.append(line.strip())
    return heteroatom_lines

hetero_atom_composition = {}

def hetero_atom_residue_counter(heteroatom_lines):


    for line in heteroatom_lines:
      if "HOH" not in line :
        residue_name = line[17:20].strip()
        hetero_atom_composition[residue_name] = hetero_atom_composition.get(residue_name, 0) + 1

    return hetero_atom_composition

def get_coordinates(heteroatom_line):
    x = float(heteroatom_line[30:38])
    y = float(heteroatom_line[38:46])
    z = float(heteroatom_line[46:54])
    return x, y, z

def distance_calculator(x1, y1, z1, x2, y2, z2):
    distance = math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2) + ((z2 - z1) ** 2))
    return distance

def get_ca_coordinates(atom_line):

    if atom_line[13:15].strip() == 'CA':
        x = float(atom_line[30:38])
        y = float(atom_line[38:46])
        z = float(atom_line[46:54])
        return x, y, z
    else:
        return None

def most_distant_residue_finder(atom_lines):

    ca_coordinates = [(i, get_ca_coordinates(line)) for i, line in enumerate(atom_lines) if get_ca_coordinates(line) is not None]
    max_distance = 0
    most_distant_residues = None
    for i in range(len(ca_coordinates)):
        for j in range(i+1, len(ca_coordinates)):
            distance = distance_calculator(*ca_coordinates[i][1], *ca_coordinates[j][1])
            if distance > max_distance:
                max_distance = distance
                resid_1 = int(atom_lines[ca_coordinates[i][0]][22:26])
                resid_2 = int(atom_lines[ca_coordinates[j][0]][22:26])
                most_distant_residues = ((resid_1, resid_2), distance)
    return most_distant_residues

def calculate_center_of_mass(atom_lines):
    total_mass = 0
    sums = [0, 0, 0]

    for line in atom_lines:
        if line[0:6] in ['ATOM  ', 'HETATM']:
            x, y, z = get_coordinates(line)
            mass = 1
            total_mass += mass
            sums[0] += mass * x
            sums[1] += mass * y
            sums[2] += mass * z
    center_of_mass = tuple(s / total_mass for s in sums)
    return center_of_mass

def radius_of_gyration_calculator(atom_lines):

    center_of_mass = calculate_center_of_mass(atom_lines)
    total_mass = 0
    sum_of_squares = 0
    for line in atom_lines:
        if line[0:6] in ['ATOM  ', 'HETATM']:
            x, y, z = get_coordinates(line)
            mass = 1
            total_mass += mass
            sum_of_squares += mass * ((x - center_of_mass[0]) ** 2 + (y - center_of_mass[1]) ** 2 + (z - center_of_mass[2]) ** 2)
    radius_of_gyration = math.sqrt(sum_of_squares / total_mass)
    return radius_of_gyration

def print_function(pdb_file):

    atom_lines = pdb_file_reader(pdb_file)

    amino_acid_composition = amino_acid_composition_calculator(atom_lines)
    amino_acid_composition_percentage = amino_acid_composition_percentage_calculator(atom_lines)

    amino_acid_hydrophobicity_composition = amino_acid_hydrophobicity_composition_calculator(amino_acid_composition, Kyte_Doolittle_scale)
    amino_acid_hydrophobicity_composition_percentage = amino_acid_hydrophobicity_composition_percentage_calculator(amino_acid_composition, Kyte_Doolittle_scale)

    atomic_composition = atomic_composition_calculator(atom_lines)
    atomic_composition_percentage = atomic_composition_percentage_calculator(atom_lines)

    amino_acid_charge_compostion = amino_acid_charge_composition_calculator(amino_acid_composition)

    heteroatom_lines = hetero_atom_pdb_reader(pdb_file)


    hetero_atom_composition = hetero_atom_residue_counter(heteroatom_lines)

    most_distant_residues = most_distant_residue_finder(atom_lines)

    radius_of_gyration = radius_of_gyration_calculator(atom_lines)

    print(f"Amino acid composition:")
    for amino_acid in amino_acid_composition.keys():
        print(f"{str(amino_acid)} {str(amino_acid_composition[amino_acid])} {amino_acid_composition_percentage[amino_acid]:.2f}%")

    print(f"\nAmino acids composition categorized on the basis of hydrophobicity:")
    for hydrophobicity in amino_acid_hydrophobicity_composition.keys():
        print(f"{str(hydrophobicity)} {str(amino_acid_hydrophobicity_composition[hydrophobicity])} {amino_acid_hydrophobicity_composition_percentage[hydrophobicity]:.2f}%")

    print(f"\nAtomic composition:")
    for atom in atomic_composition.keys():
        print(f"{atom} {atomic_composition[atom]} {atomic_composition_percentage[atom]:.2f}%")

    print("\nCharge composition of protein:")
    print(f"Positively Charged Residues: {str(amino_acid_charge_compostion['Positive'])}")
    print(f"Negatively Charged Residues: {str(amino_acid_charge_compostion['Negative'])}")


    print(f"\nNumber of heteroatoms: {len(hetero_atom_composition.keys())}")
    for heteroatom in hetero_atom_composition.keys():
        print(f"{heteroatom} : {hetero_atom_composition[heteroatom]}")

    print(f"\nDistance between most distant residues {most_distant_residues[0][0]} and {most_distant_residues[0][1]} is {most_distant_residues[1]:.2f} Angstrom")

    print(f"\nRadius of gyration: {radius_of_gyration:.2f}")


if __name__ == "__main__":
    print_function(sys.argv[1])
